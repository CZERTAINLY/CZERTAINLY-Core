package com.czertainly.core.service;

import com.czertainly.api.exception.*;
import com.czertainly.api.model.client.attribute.RequestAttributeDto;
import com.czertainly.api.model.client.attribute.custom.CustomAttributeCreateRequestDto;
import com.czertainly.api.model.client.certificate.*;
import com.czertainly.api.model.common.NameAndUuidDto;
import com.czertainly.api.model.common.attribute.v2.AttributeType;
import com.czertainly.api.model.common.attribute.v2.MetadataAttribute;
import com.czertainly.api.model.common.attribute.v2.content.AttributeContentType;
import com.czertainly.api.model.common.attribute.v2.content.StringAttributeContent;
import com.czertainly.api.model.common.attribute.v2.properties.MetadataAttributeProperties;
import com.czertainly.api.model.common.enums.cryptography.KeyType;
import com.czertainly.api.model.core.auth.Resource;
import com.czertainly.api.model.core.certificate.*;
import com.czertainly.api.model.core.compliance.ComplianceStatus;
import com.czertainly.api.model.core.connector.ConnectorStatus;
import com.czertainly.api.model.core.connector.FunctionGroupCode;
import com.czertainly.api.model.core.enums.CertificateProtocol;
import com.czertainly.api.model.core.enums.CertificateRequestFormat;
import com.czertainly.core.attribute.engine.AttributeEngine;
import com.czertainly.core.attribute.engine.records.ObjectAttributeContentInfo;
import com.czertainly.core.dao.entity.*;
import com.czertainly.core.dao.entity.Certificate;
import com.czertainly.core.dao.entity.acme.AcmeProfile;
import com.czertainly.core.dao.repository.*;
import com.czertainly.core.model.auth.CertificateProtocolInfo;
import com.czertainly.core.security.authz.SecuredUUID;
import com.czertainly.core.security.authz.SecurityFilter;
import com.czertainly.core.util.BaseSpringBootTest;
import com.czertainly.core.util.CertificateTestUtil;
import com.czertainly.core.util.CertificateUtil;
import com.czertainly.core.util.MetaDefinitions;
import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import org.bouncycastle.operator.OperatorCreationException;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;

import java.io.IOException;
import java.io.InputStream;
import java.security.*;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;

class CertificateServiceTest extends BaseSpringBootTest {

    public static final String CA_BASE64_CONTENT = "";
    public static final String EE_BASE64_CONTENT = "";
    private static final int AUTH_SERVICE_MOCK_PORT = 10000;

    @DynamicPropertySource
    static void authServiceProperties(DynamicPropertyRegistry registry) {
        registry.add("auth-service.base-url", () -> "http://localhost:" + AUTH_SERVICE_MOCK_PORT);
    }

    private static final String SAMPLE_PKCS10 = "MIIBUjCBvAIBADATMREwDwYDVQQDDAhuZXdfY2VydDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA52WsWllsOi/XtK8VcKHN63Mhk6awMboP9iuwgtPXzkFLV/wILHH+YPAJcS8dP037SZQlAng9dF+IoLHn7WFYmQqqgkObWoH1+5LxHjkPRRNPJLKPtxfM/V+IafsddK7a5TiVD+PiKjoWQaGHVEieozV1fK2BfqVbenKbYMupGVkCAwEAAaAAMA0GCSqGSIb3DQEBBAUAA4GBALtgmv31dFCSO+KnXWeaGEVr2H8g6O0D/RS8xoTRF4yHIgU84EXL5ZWUxhLF6mAXP1de0IfeEf95gGrU9FQ7tdUnwfsBZCIhHOQ/PdzVhRRhaVaPK8N+/g1GyXM/mC074u8y+VoyhHTqAlnbGwzyJkLnVwJ0/jLiRaTdvn7zFDWr";

    @Autowired
    private CertificateService certificateService;
    @Autowired
    private CertificateRepository certificateRepository;
    @Autowired
    private CertificateContentRepository certificateContentRepository;
    @Autowired
    private RaProfileRepository raProfileRepository;
    @Autowired
    private AuthorityInstanceReferenceRepository authorityInstanceReferenceRepository;
    @Autowired
    private ConnectorRepository connectorRepository;
    @Autowired
    private FunctionGroupRepository functionGroupRepository;
    @Autowired
    private Connector2FunctionGroupRepository connector2FunctionGroupRepository;
    @Autowired
    private GroupRepository groupRepository;
    @Autowired
    private ResourceObjectAssociationService associationService;
    @Autowired
    private OwnerAssociationRepository ownerAssociationRepository;
    @Autowired
    private CryptographicKeyRepository cryptographicKeyRepository;
    @Autowired
    private AttributeService attributeService;
    @Autowired
    private AcmeProfileRepository acmeProfileRepository;
    @Autowired
    private CertificateProtocolAssociationRepository certificateProtocolAssociationRepository;
    @Autowired
    private ProtocolCertificateAssociationsRepository protocolCertificateAssociationsRepository;
    @Autowired
    private CertificateRelationRepository certificateRelationRepository;

    private AttributeEngine attributeEngine;

    private Certificate certificate;
    private RaProfile raProfile;
    private Group group;

    private X509Certificate x509Cert;

    private Connector connector;
    private WireMockServer mockServer;

    @Autowired
    void setAttributeEngine(AttributeEngine attributeEngine) {
        this.attributeEngine = attributeEngine;
    }

    @BeforeEach
    void setUp() throws GeneralSecurityException, IOException, AttributeException {
        mockServer = new WireMockServer(0);
        mockServer.start();

        WireMock.configureFor("localhost", mockServer.port());

        connector = new Connector();
        connector.setName("authorityInstanceConnector");
        connector.setUrl("http://localhost:" + mockServer.port());
        connector.setStatus(ConnectorStatus.CONNECTED);
        connector = connectorRepository.save(connector);

        FunctionGroup functionGroup = new FunctionGroup();
        functionGroup.setCode(FunctionGroupCode.AUTHORITY_PROVIDER);
        functionGroup.setName(FunctionGroupCode.AUTHORITY_PROVIDER.getCode());
        functionGroupRepository.save(functionGroup);

        Connector2FunctionGroup c2fg = new Connector2FunctionGroup();
        c2fg.setConnector(connector);
        c2fg.setConnectorUuid(connector.getUuid());
        c2fg.setFunctionGroup(functionGroup);
        c2fg.setFunctionGroupUuid(functionGroup.getUuid());
        c2fg.setKinds(MetaDefinitions.serializeArrayString(List.of("ApiKey")));
        connector2FunctionGroupRepository.save(c2fg);

        connector.getFunctionGroups().add(c2fg);
        connectorRepository.save(connector);

        AuthorityInstanceReference authorityInstance = new AuthorityInstanceReference();
        authorityInstance.setName("testAuthorityInstance1");
        authorityInstance.setConnector(connector);
        authorityInstance.setConnectorUuid(connector.getUuid());
        authorityInstance.setKind("sample");
        authorityInstance.setAuthorityInstanceUuid("1l");
        authorityInstance = authorityInstanceReferenceRepository.save(authorityInstance);

        CertificateContent certificateContent = new CertificateContent();
        certificateContent.setContent("123456");
        certificateContent = certificateContentRepository.save(certificateContent);

        RaProfile raProfileOld = new RaProfile();
        raProfileOld.setName("Test RA profile Old");
        raProfileOld.setAuthorityInstanceReference(authorityInstance);
        raProfileOld = raProfileRepository.save(raProfileOld);

        certificate = new Certificate();
        certificate.setSubjectDn("testCertificate");
        certificate.setIssuerDn("testCercertificatetificate");
        certificate.setSerialNumber("123456789");
        certificate.setState(CertificateState.ISSUED);
        certificate.setValidationStatus(CertificateValidationStatus.VALID);
        certificate.setCertificateContent(certificateContent);
        certificate.setCertificateContentId(certificateContent.getId());
        certificate.setRaProfile(raProfileOld);
        certificate = certificateRepository.save(certificate);

        // Ensure OwnerAssociation is created and associated
        OwnerAssociation ownerAssociation = new OwnerAssociation();
        ownerAssociation.setOwnerUuid(UUID.randomUUID()); // Set a proper UUID
        ownerAssociation.setOwnerUsername("ownerName");
        ownerAssociation.setResource(Resource.CERTIFICATE);
        ownerAssociation.setObjectUuid(certificate.getUuid());
        ownerAssociation.setCertificate(certificate);
        ownerAssociationRepository.saveAndFlush(ownerAssociation);

        certificate.setOwner(ownerAssociation);
        certificateRepository.save(certificate);

        List<MetadataAttribute> meta = new ArrayList<>();
        MetadataAttribute tst = new MetadataAttribute();
        tst.setType(AttributeType.META);
        tst.setName("Test");
        tst.setContentType(AttributeContentType.STRING);
        tst.setUuid("9f94036e-f050-4c9c-a3b8-f47b1be696aa");
        tst.setProperties(new MetadataAttributeProperties() {{
            setLabel("Test meta");
        }});
        tst.setContent(List.of(new StringAttributeContent("xyz", "xyz")));
        meta.add(tst);

        UUID connectorUuid = raProfileOld.getAuthorityInstanceReference().getConnectorUuid();
        attributeEngine.updateMetadataAttributes(meta, new ObjectAttributeContentInfo(connectorUuid, Resource.CERTIFICATE, certificate.getUuid()));

        raProfile = new RaProfile();
        raProfile.setName("Test RA profile");
        raProfile.setAuthorityInstanceReference(authorityInstance);
        raProfile = raProfileRepository.save(raProfile);

        group = new Group();
        group.setName("TestGroup");
        group = groupRepository.save(group);

        InputStream keyStoreStream = CertificateServiceTest.class.getClassLoader().getResourceAsStream("client1.p12");
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(keyStoreStream, "123456".toCharArray());

        x509Cert = (X509Certificate) keyStore.getCertificate("1");
    }

    @Test
    void testListCertificates() {
        CertificateResponseDto certificateEntities = certificateService.listCertificates(SecurityFilter.create(), new CertificateSearchRequestDto());
        Assertions.assertNotNull(certificateEntities);
        Assertions.assertFalse(certificateEntities.getCertificates().isEmpty());
        Assertions.assertEquals(1, certificateEntities.getCertificates().size());
        Assertions.assertEquals(certificate.getUuid().toString(), certificateEntities.getCertificates().get(0).getUuid());
    }

    @Test
    void testGetCertificate() throws NotFoundException, CertificateException, IOException {
        CertificateDetailDto dto = certificateService.getCertificate(certificate.getSecuredUuid());
        Assertions.assertNotNull(dto);
        Assertions.assertEquals(certificate.getUuid().toString(), dto.getUuid());
        Assertions.assertEquals(certificate.getSerialNumber(), dto.getSerialNumber());
    }

    @Test
    void testGetCertificate_notFound() {
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.getCertificate(SecuredUUID.fromString("abfbc322-29e1-11ed-a261-0242ac120002")));
    }

    @Test
    void testCreateCertificateEntity() {
        Certificate cert = certificateService.createCertificateEntity(x509Cert);

        Assertions.assertNotNull(cert);
        Assertions.assertEquals("CLIENT1", cert.getCommonName());
        Assertions.assertEquals("177e75f42e95ecb98f831eb57de27b0bc8c47643", cert.getSerialNumber());
    }

    @Test
    void testCreateHybridCertificate() throws InvalidAlgorithmParameterException, CertificateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException, OperatorCreationException, IOException, AlreadyExistException {
        Certificate hybridCertificate = certificateService.checkCreateCertificate(Base64.getEncoder().encodeToString(
                CertificateTestUtil.createHybridCertificate().getEncoded()));

        Assertions.assertTrue(hybridCertificate.isHybridCertificate());
        Assertions.assertNotNull(hybridCertificate.getAltSignatureAlgorithm());
        Assertions.assertNotNull(hybridCertificate.getAltKeyUuid());

        Optional<CryptographicKey> altCryptographicKey = cryptographicKeyRepository.findByUuid(hybridCertificate.getAltKeyUuid());
        Assertions.assertTrue(altCryptographicKey.isPresent());
    }

    @Test
    void testCheckCreateCertificate() throws CertificateException, AlreadyExistException, NoSuchAlgorithmException {
        Certificate cert = certificateService.checkCreateCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()));

        Assertions.assertNotNull(cert);
        Assertions.assertEquals("CLIENT1", cert.getCommonName());
        Assertions.assertEquals("177e75f42e95ecb98f831eb57de27b0bc8c47643", cert.getSerialNumber());
    }

    @Test
    void testAddCertificate_certificateException() {
        Assertions.assertThrows(CertificateException.class, () -> certificateService.checkCreateCertificate("certificate"));
    }

    @Test
    void testRemoveCertificate_notFound() {
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.deleteCertificate(SecuredUUID.fromString("abfbc322-29e1-11ed-a261-0242ac120002")));
    }

    @Test
    void testRevokeCertificate() throws NotFoundException, CertificateException, IOException {
        certificateService.revokeCertificate(certificate.getSerialNumber());

        CertificateDetailDto dto = certificateService.getCertificate(certificate.getSecuredUuid());

        Assertions.assertNotNull(dto);
        Assertions.assertEquals(certificate.getUuid().toString(), dto.getUuid());
        Assertions.assertEquals(certificate.getSerialNumber(), dto.getSerialNumber());
        Assertions.assertEquals(CertificateState.REVOKED, dto.getState());
    }

    @Test
    void testUploadCertificate() throws CertificateException, AlreadyExistException, NoSuchAlgorithmException, NotFoundException, AttributeException {
        UploadCertificateRequestDto request = new UploadCertificateRequestDto();
        request.setCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()));

        CertificateDetailDto dto = certificateService.upload(request, true);
        Assertions.assertNotNull(dto);
        Assertions.assertEquals("CLIENT1", dto.getCommonName());
        Assertions.assertEquals("177e75f42e95ecb98f831eb57de27b0bc8c47643", dto.getSerialNumber());

        // test for presence of created public key
        var newCertificate = certificateRepository.findWithAssociationsByUuid(UUID.fromString(dto.getUuid()));
        Assertions.assertTrue(newCertificate.isPresent());
        Assertions.assertEquals("certKey_%s".formatted(dto.getCommonName()), newCertificate.get().getKey().getName());
        Assertions.assertEquals(1, newCertificate.get().getKey().getItems().size());
        Assertions.assertEquals(KeyType.PUBLIC_KEY, newCertificate.get().getKey().getItems().stream().findFirst().get().getType());
    }

    @Test
    void testUpdateRaProfile() throws NotFoundException, CertificateOperationException, CertificateException, IOException, AttributeException {
        mockServer.stubFor(WireMock
                .post(WireMock.urlPathMatching("/v2/authorityProvider/authorities/[^/]+/certificates/identify"))
                .willReturn(WireMock.okJson("{\"meta\":[{\"uuid\":\"b42ab690-60fd-11ed-9b6a-0242ac120002\",\"name\":\"ejbcaUsername\",\"description\":\"EJBCA Username\",\"content\":[{\"reference\":\"ShO0lp7qbnE=\",\"data\":\"ShO0lp7qbnE=\"}],\"type\":\"meta\",\"contentType\":\"string\",\"properties\":{\"label\":\"EJBCA Username\",\"visible\":true,\"group\":null,\"global\":false}}]}")));

        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setRaProfileUuid(raProfile.getUuid().toString());

        certificate.setArchived(true);
        certificateRepository.save(certificate);

        UUID oldRaProfileUuid = certificate.getRaProfileUuid();
        SecuredUUID certificateSecuredUuid = certificate.getSecuredUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.updateCertificateObjects(certificateSecuredUuid, uuidDto));
        Certificate certificateReloaded = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertEquals(oldRaProfileUuid, certificateReloaded.getRaProfile().getUuid());

        certificate.setArchived(false);
        certificateRepository.save(certificate);

        certificateService.updateCertificateObjects(certificateSecuredUuid, uuidDto);

        certificateReloaded = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertEquals(raProfile, certificateReloaded.getRaProfile());
        CertificateDetailDto certificateDetailDto = certificateService.getCertificate(certificateSecuredUuid);

        Assertions.assertEquals(1, certificateDetailDto.getMetadata().size());
        Assertions.assertEquals(connector.getName(), certificateDetailDto.getMetadata().getFirst().getConnectorName());
        Assertions.assertEquals(1, certificateDetailDto.getMetadata().getFirst().getItems().size());
    }

    @Test
    void testUpdateRaProfileFails() {
        mockServer.stubFor(WireMock
                .post(WireMock.urlPathMatching("/v2/authorityProvider/authorities/[^/]+/certificates/identify"))
                .willReturn(WireMock.jsonResponse("{\"message\": \"Object of type 'Certificate' not identified.\"}", 404)));

        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setRaProfileUuid(raProfile.getUuid().toString());

        Assertions.assertThrows(CertificateOperationException.class, () -> certificateService.updateCertificateObjects(certificate.getSecuredUuid(), uuidDto));

        mockServer.stubFor(WireMock
                .post(WireMock.urlPathMatching("/v2/authorityProvider/authorities/[^/]+/certificates/identify"))
                .willReturn(WireMock.jsonResponse("[\"Object of type 'Certificate' identified but not valid according RA profile attributes.\"]", 422)));

        Assertions.assertThrows(CertificateOperationException.class, () -> certificateService.updateCertificateObjects(certificate.getSecuredUuid(), uuidDto));
    }

    @Test
    void testUpdateRaProfile_certificateNotFound() {
        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setRaProfileUuid(raProfile.getUuid().toString());
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.updateCertificateObjects(SecuredUUID.fromString("abfbc322-29e1-11ed-a261-0242ac120002"), uuidDto));
    }

    @Test
    void testUpdateRaProfile_raProfileNotFound() {
        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setRaProfileUuid("abfbc322-29e1-11ed-a261-0242ac120002");
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.updateCertificateObjects(certificate.getSecuredUuid(), uuidDto));
    }

    @Test
    void testUpdateCertificateGroup() throws NotFoundException, CertificateOperationException, AttributeException {
        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setGroupUuids(List.of(group.getUuid().toString()));

        certificate.setArchived(true);
        certificateRepository.save(certificate);
        SecuredUUID certificateSecuredUuid = certificate.getSecuredUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.updateCertificateObjects(certificateSecuredUuid, uuidDto));
        Certificate certificateEntity = certificateRepository.findWithAssociationsByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertTrue(certificateEntity.getGroups().isEmpty());

        certificate.setArchived(false);
        certificateRepository.save(certificate);

        certificateService.updateCertificateObjects(certificateSecuredUuid, uuidDto);
        certificateEntity = certificateRepository.findWithAssociationsByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertEquals(1, certificateEntity.getGroups().size());
        Assertions.assertEquals(group.getUuid(), certificateEntity.getGroups().stream().findFirst().get().getUuid());

        associationService.removeGroup(Resource.CERTIFICATE, certificate.getUuid(), group.getUuid());
        certificateEntity = certificateRepository.findWithAssociationsByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertEquals(0, certificateEntity.getGroups().size());
    }

    @Test
    void testUpdateCertificateGroup_certificateNotFound() {
        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setGroupUuids(List.of(group.getUuid().toString()));
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.updateCertificateObjects(SecuredUUID.fromString("abfbc322-29e1-11ed-a261-0242ac120002"), uuidDto));
    }

    @Test
    void testUpdateCertificateGroup_groupNotFound() {
        CertificateUpdateObjectsDto uuidDto = new CertificateUpdateObjectsDto();
        uuidDto.setGroupUuids(List.of(UUID.randomUUID().toString()));
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.updateCertificateObjects(certificate.getSecuredUuid(), uuidDto));
    }

    @Test
    void testUpdateTrustedCaMark() throws CertificateOperationException, NotFoundException, AttributeException {
        certificate.setArchived(true);
        certificateRepository.save(certificate);
        CertificateUpdateObjectsDto request = new CertificateUpdateObjectsDto();
        request.setTrustedCa(true);
        SecuredUUID uuid = certificate.getSecuredUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.updateCertificateObjects(uuid, request));
        certificate.setArchived(false);
        certificate.setTrustedCa(false);
        certificateRepository.save(certificate);
        certificateService.updateCertificateObjects(uuid, request);
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertTrue(certificate.getTrustedCa());
    }


    @Test
    void testUpdateOwner() throws NotFoundException, CertificateOperationException, AttributeException {
        WireMockServer mockServerUser = mockUpdateUser();

        CertificateUpdateObjectsDto request = new CertificateUpdateObjectsDto();
        request.setOwnerUuid(UUID.randomUUID().toString());

        certificate.setArchived(true);
        certificateRepository.save(certificate);
        String oldOwnerUsername = certificate.getOwner().getOwnerUsername();
        SecuredUUID certificateSecuredUuid = certificate.getSecuredUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.updateCertificateObjects(certificateSecuredUuid, request));
        NameAndUuidDto owner = associationService.getOwner(Resource.CERTIFICATE, certificate.getUuid());
        Assertions.assertEquals(oldOwnerUsername, owner.getName());

        certificate.setArchived(false);
        certificateRepository.save(certificate);
        certificateService.updateCertificateObjects(certificateSecuredUuid, request);

        // use association service to load certificate owner association since owner is not lazy loaded to mapped certificate relation due to scope of transaction in test
        owner = associationService.getOwner(Resource.CERTIFICATE, certificate.getUuid());
        Assertions.assertNotNull(owner);
        Assertions.assertEquals(request.getOwnerUuid(), owner.getUuid());
        Assertions.assertEquals("newOwner", owner.getName());

        mockServerUser.stubFor(WireMock.get(WireMock.urlPathMatching("/auth/users/[^/]+")).willReturn(
                WireMock.okJson("{ \"username\": \"newOwner2\"}")
        ));
        request.setOwnerUuid(UUID.randomUUID().toString());
        certificateService.updateCertificateObjects(certificateSecuredUuid, request);

        owner = associationService.getOwner(Resource.CERTIFICATE, certificate.getUuid());
        Assertions.assertNotNull(owner);
        Assertions.assertEquals(request.getOwnerUuid(), owner.getUuid());
        Assertions.assertEquals("newOwner2", owner.getName());

        request.setOwnerUuid("");
        certificateService.updateCertificateObjects(certificateSecuredUuid, request);
        owner = associationService.getOwner(Resource.CERTIFICATE, certificate.getUuid());
        Assertions.assertNull(owner);
        mockServerUser.stop();
    }

    private WireMockServer mockUpdateUser() {
        WireMockServer mockServerUpdateUser = new WireMockServer(AUTH_SERVICE_MOCK_PORT);
        mockServerUpdateUser.start();
        WireMock.configureFor("localhost", mockServerUpdateUser.port());
        mockServerUpdateUser.stubFor(WireMock.get(WireMock.urlPathMatching("/auth/users/[^/]+")).willReturn(
                WireMock.okJson("{ \"username\": \"newOwner\"}")
        ));
        return mockServerUpdateUser;
    }

    @Test
    void testUpdateCertificateOwner_certificateNotFound() {
        CertificateUpdateObjectsDto dto = new CertificateUpdateObjectsDto();
        dto.setOwnerUuid("testOwner");
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.updateCertificateObjects(SecuredUUID.fromString("abfbc322-29e1-11ed-a261-0242ac120002"), dto));
    }

    @Test
    void testUpdateCertificateUserArchived() {
        certificate.setArchived(true);
        certificateRepository.save(certificate);
        UUID certificateUuid = certificate.getUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.updateCertificateUser(certificateUuid, null));
        certificate.setArchived(false);
        certificateRepository.save(certificate);
        Assertions.assertDoesNotThrow(() -> certificateService.updateCertificateUser(certificateUuid, null));
    }

    @Test
    void testBulkRemove() throws NotFoundException {
        RemoveCertificateDto request = new RemoveCertificateDto();
        request.setUuids(List.of(certificate.getUuid().toString()));

        certificateService.bulkDeleteCertificate(SecurityFilter.create(), request);

        Assertions.assertThrows(NotFoundException.class, () -> certificateService.getCertificate(certificate.getSecuredUuid()));
    }

    @Test
    void testDownloadCertificate() throws NotFoundException, CertificateException, IOException {
        CertificateContent certificateContentDownload = new CertificateContent();
        certificateContentDownload.setContent("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");
        certificateContentDownload = certificateContentRepository.save(certificateContentDownload);
        certificate.setCertificateContent(certificateContentDownload);
        certificateRepository.save(certificate);
        testDownloadInternal(CertificateFormat.RAW, CertificateFormatEncoding.PEM);
        testDownloadInternal(CertificateFormat.RAW, CertificateFormatEncoding.DER);
        testDownloadInternal(CertificateFormat.PKCS7, CertificateFormatEncoding.PEM);
        testDownloadInternal(CertificateFormat.PKCS7, CertificateFormatEncoding.DER);
    }

    @Test
    void testUploadCertificateKey() throws com.czertainly.api.exception.CertificateException, CertificateEncodingException, NotFoundException {
        Certificate certificateWithKey = certificateService.createCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()), CertificateType.X509);
        UUID keyUuid = certificateWithKey.getKeyUuid();
        Assertions.assertNotNull(keyUuid);
        // Check if key already in DB is assigned to the certificate
        certificateService.deleteCertificate(certificateWithKey.getSecuredUuid());
        certificateWithKey = certificateService.createCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()), CertificateType.X509);
        Assertions.assertEquals(keyUuid, certificateWithKey.getKeyUuid());
    }

    @Test
    void testDeleteCertificateWithUser() throws CertificateEncodingException, com.czertainly.api.exception.CertificateException {
        Certificate certificateNew = certificateService.createCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()), CertificateType.X509);
        certificateNew.setUserUuid(UUID.randomUUID());
        certificateRepository.save(certificateNew);
        SecuredUUID uuid = certificateNew.getSecuredUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.deleteCertificate(uuid));
    }

    @Test
    void bulkUpdate() throws CertificateException, com.czertainly.api.exception.CertificateException, NotFoundException, IOException {
        Certificate certificateNew = certificateService.createCertificate(Base64.getEncoder().encodeToString(x509Cert.getEncoded()), CertificateType.X509);

        MultipleCertificateObjectUpdateDto request = new MultipleCertificateObjectUpdateDto();
        request.setCertificateUuids(List.of(certificateNew.getUuid().toString()));
        request.setGroupUuids(List.of(group.getUuid().toString()));
        certificateService.bulkUpdateCertificatesObjects(SecurityFilter.create(), request);

        CertificateDetailDto detailDto = certificateService.getCertificate(certificateNew.getSecuredUuid());
        Assertions.assertEquals(1, detailDto.getGroups().size());
        Assertions.assertEquals(group.getUuid().toString(), detailDto.getGroups().getFirst().getUuid());
    }

    @Test
    void testGetSearchableFieldInformation() {
        mockServer = new WireMockServer(AUTH_SERVICE_MOCK_PORT);
        mockServer.start();
        WireMock.configureFor("localhost", mockServer.port());
        mockServer.stubFor(WireMock.get(WireMock.urlPathMatching("/auth/users")).willReturn(
                WireMock.okJson("{ \"data\": [] }")
        ));
        Assertions.assertDoesNotThrow(() -> certificateService.getSearchableFieldInformationByGroup());
        mockServer.stop();
    }

    @Test
    void testClearKeyAssociations() {
        CryptographicKey key = new CryptographicKey();
        cryptographicKeyRepository.save(key);
        certificate.setKey(key);
        certificate.setKeyUuid(key.getUuid());
        Certificate altCertificate = new Certificate();
        CertificateContent altContent = new CertificateContent();
        altContent.setContent("content");
        certificateContentRepository.save(altContent);
        altCertificate.setCertificateContent(altContent);
        altCertificate.setAltKey(key);
        altCertificate.setAltKeyUuid(key.getUuid());
        certificateRepository.save(certificate);
        certificateRepository.save(altCertificate);
        certificateService.clearKeyAssociations(key.getUuid());
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        altCertificate = certificateRepository.findByUuid(altCertificate.getUuid()).get();
        Assertions.assertNull(certificate.getKey());
        Assertions.assertNull(certificate.getKeyUuid());
        Assertions.assertNull(altCertificate.getAltKey());
        Assertions.assertNull(altCertificate.getAltKeyUuid());
    }

    @Test
    void testArchiveCertificate() throws NotFoundException {
        certificateService.unarchiveCertificate(certificate.getUuid());
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertFalse(certificate.isArchived());

        certificateService.archiveCertificate(certificate.getUuid());
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertTrue(certificate.isArchived());

        certificateService.bulkUnarchiveCertificates(List.of(certificate.getUuid()));
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertFalse(certificate.isArchived());

        certificateService.bulkArchiveCertificates(List.of(certificate.getUuid()));
        certificate = certificateRepository.findByUuid(certificate.getUuid()).get();
        Assertions.assertTrue(certificate.isArchived());
    }

    @Test
    void testListCmpCertificates() {
        certificate.setArchived(true);
        certificateRepository.save(certificate);
        Assertions.assertTrue(certificateService.listCmpSigningCertificates(new SecurityFilter()).isEmpty());
    }

    private void testDownloadInternal(CertificateFormat format, CertificateFormatEncoding encoding) throws NotFoundException, CertificateException, IOException {
        CertificateDownloadResponseDto certificateDownloadResponseDto = certificateService.downloadCertificate(certificate.getUuid(), format, encoding);
        Assertions.assertDoesNotThrow(() -> (certificateService.createCertificate(certificateDownloadResponseDto.getContent(), CertificateType.X509)));
    }

    @Test
    void testCheckCompliance() throws NotFoundException {
        certificate.setArchived(true);
        certificateRepository.save(certificate);
        ComplianceStatus oldComplianceStatus = certificate.getComplianceStatus();
        CertificateComplianceCheckDto request = new CertificateComplianceCheckDto();
        request.setCertificateUuids(List.of(certificate.getUuid().toString()));
        certificateService.checkCompliance(request);
        Assertions.assertEquals(oldComplianceStatus, certificateRepository.findByUuid(certificate.getUuid()).get().getComplianceStatus());
    }

    @Test
    void testUpdateDns() {
        String oid = "1.2.3";
        String oldCode = "OU";
        String newCode = "OO";
        certificate.setSubjectDn("%s=org, %sA=cn".formatted(oldCode, oldCode));
        certificate.setSubjectDnNormalized("%s=org".formatted(oid));
        certificate.setIssuerDn("CN=cn, %s=org".formatted(oldCode));
        certificate.setIssuerDnNormalized("1.2.3.4=a, %s=f".formatted(oid));
        certificateRepository.save(certificate);
        certificateService.updateCertificateDNs(oid, newCode, oldCode);
        certificate = certificateRepository.findByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertEquals("%s=org, %sA=cn".formatted(newCode, oldCode), certificate.getSubjectDn());
        Assertions.assertEquals("CN=cn, %s=org".formatted(newCode), certificate.getIssuerDn());

        certificate.setIssuerDn("%s=org, CN=cn".formatted(oldCode));
        certificate.setSubjectDn("CN=cn, %s=org".formatted(oldCode));
        certificateRepository.save(certificate);
        certificateService.updateCertificateDNs(oid, newCode, oldCode);
        certificate = certificateRepository.findByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertEquals("%s=org, CN=cn".formatted(newCode), certificate.getIssuerDn());
        Assertions.assertEquals("CN=cn, %s=org".formatted(newCode), certificate.getSubjectDn());

        certificate.setIssuerDnNormalized("1.2.3.4=a, 1a2x3=f");
        certificateRepository.save(certificate);
        certificateService.updateCertificateDNs(oid, "new", newCode);
        certificate = certificateRepository.findByUuid(certificate.getUuid()).orElseThrow();
        Assertions.assertEquals("%s=org, CN=cn".formatted(newCode), certificate.getIssuerDn());


    }

    @Test
    void testSetProtocolCertificateAssociations() throws AlreadyExistException, AttributeException, NotFoundException, NoSuchAlgorithmException, ConnectorException, CertificateRequestException {
        WireMockServer mockServerUpdateUser = mockUpdateUser();
        mockServer.stubFor(WireMock
                .post(WireMock.urlPathMatching("/v2/authorityProvider/authorities/[^/]+/certificates/issue/attributes/validate"))
                .willReturn(WireMock.okJson("true")));
        mockServer.stubFor(WireMock
                .get(WireMock.urlPathMatching("/v2/authorityProvider/authorities/[^/]+/certificates/issue/attributes"))
                .willReturn(WireMock.okJson("[]")));

        AcmeProfile acmeProfile = getAcmeProfile();
        CertificateProtocolInfo protocolInfo = new CertificateProtocolInfo();
        protocolInfo.setProtocol(CertificateProtocol.ACME);
        protocolInfo.setProtocolProfileUuid(acmeProfile.getUuid());
        CertificateDetailDto certificateDetailDto = certificateService.submitCertificateRequest(
                SAMPLE_PKCS10, CertificateRequestFormat.PKCS10, List.of(), List.of(), List.of(), List.of(),
                null, null, raProfile.getUuid(), null, protocolInfo);
        Certificate certificateToBeIssued = certificateRepository.findWithAssociationsByUuid(UUID.fromString(certificateDetailDto.getUuid())).orElseThrow();
        Assertions.assertEquals(Set.of(group), certificateToBeIssued.getGroups());
        Assertions.assertNotNull(associationService.getOwner(Resource.CERTIFICATE, certificateToBeIssued.getUuid()));
        Assertions.assertNotNull(attributeEngine.getObjectCustomAttributesContent(Resource.CERTIFICATE, certificateToBeIssued.getUuid()));
        mockServer.stop();
        mockServerUpdateUser.stop();
    }

    @Test
    void testCertificateRelations() throws NotFoundException {
        certificate.setIssuerDnNormalized("issuerDn");
        certificate.setSubjectDnNormalized("subjectDn");
        certificate.setIssuerSerialNumber("serialNumber");
        CryptographicKey key = new CryptographicKey();
        cryptographicKeyRepository.save(key);
        certificate.setPublicKeyFingerprint("finger");
        Certificate sourceCertificate1 = new Certificate();
        sourceCertificate1.setIssuerDnNormalized(certificate.getIssuerDnNormalized());
        sourceCertificate1.setSubjectDnNormalized(certificate.getSubjectDnNormalized());
        sourceCertificate1.setIssuerSerialNumber(certificate.getIssuerSerialNumber());
        sourceCertificate1.setPublicKeyFingerprint(certificate.getPublicKeyFingerprint());
        Certificate sourceCertificate2 = new Certificate();
        sourceCertificate2.setIssuerDnNormalized(certificate.getIssuerDnNormalized());
        sourceCertificate2.setSubjectDnNormalized(certificate.getSubjectDnNormalized());
        sourceCertificate2.setIssuerSerialNumber(certificate.getIssuerSerialNumber());
        Certificate sourceCertificate3 = new Certificate();
        certificateRepository.saveAll(List.of(sourceCertificate1, sourceCertificate2, sourceCertificate3, certificate));
        UUID certificateUuid = certificate.getUuid();
        UUID certificateUuid1 = sourceCertificate1.getUuid();
        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificateUuid, certificateUuid1));
        sourceCertificate1.setState(CertificateState.ISSUED);
        sourceCertificate2.setState(CertificateState.ISSUED);
        sourceCertificate3.setState(CertificateState.REVOKED);
        certificateRepository.saveAll(List.of(sourceCertificate1, sourceCertificate2, sourceCertificate3, certificate));

        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificateUuid, certificateUuid));

        certificateService.associateCertificates(certificateUuid, certificateUuid1);
        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificateUuid, certificateUuid1));

        certificate.setSubjectType(CertificateSubjectType.END_ENTITY);
        sourceCertificate1.setSubjectType(CertificateSubjectType.ROOT_CA);
        certificateRepository.saveAll(List.of(sourceCertificate1, certificate));
        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificateUuid, certificateUuid1));

        sourceCertificate1.setSubjectType(CertificateSubjectType.SELF_SIGNED_END_ENTITY);
        certificateRepository.save(sourceCertificate1);

        certificateService.associateCertificates(certificateUuid, sourceCertificate2.getUuid());
        UUID certificate3Uuid = sourceCertificate3.getUuid();
        certificate.setState(CertificateState.REVOKED);
        certificate.setIssuerSerialNumber(null);
        sourceCertificate3.setIssuerSerialNumber(null);
        certificateRepository.save(certificate);
        certificateRepository.save(sourceCertificate3);
        certificateService.associateCertificates(certificateUuid, certificate3Uuid);
        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificate3Uuid, certificateUuid));


        CertificateRelationsDto relations = certificateService.getCertificateRelations(certificateUuid);
        Assertions.assertEquals(certificateUuid, relations.getCertificateUuid());
        Assertions.assertEquals(3, relations.getPredecessorCertificates().size());
        CertificateSimpleDto certificateSimpleDto1 = relations.getPredecessorCertificates().stream().filter(dto -> dto.getUuid().equals(certificateUuid1)).findFirst().orElseThrow();
        Assertions.assertEquals(CertificateRelationType.RENEWAL, certificateSimpleDto1.getRelationType());
        CertificateSimpleDto certificateSimpleDto2 = relations.getPredecessorCertificates().stream().filter(dto -> dto.getUuid().equals(sourceCertificate2.getUuid())).findFirst().orElseThrow();
        Assertions.assertEquals(CertificateRelationType.REKEY, certificateSimpleDto2.getRelationType());
        CertificateSimpleDto certificateSimpleDto3 = relations.getPredecessorCertificates().stream().filter(dto -> dto.getUuid().equals(certificate3Uuid)).findFirst().orElseThrow();
        Assertions.assertEquals(CertificateRelationType.REPLACEMENT, certificateSimpleDto3.getRelationType());

        relations = certificateService.getCertificateRelations(certificateUuid1);
        Assertions.assertEquals(1, relations.getSuccessorCertificates().size());
        CertificateSimpleDto certificateSimpleDto = relations.getSuccessorCertificates().stream().filter(dto -> dto.getUuid().equals(certificateUuid)).findFirst().orElseThrow();
        Assertions.assertEquals(CertificateRelationType.RENEWAL, certificateSimpleDto.getRelationType());

        certificateService.removeCertificateAssociation(certificateUuid, sourceCertificate2.getUuid());
        relations = certificateService.getCertificateRelations(certificateUuid);
        Assertions.assertEquals(2, relations.getPredecessorCertificates().size());
        Assertions.assertTrue(relations.getPredecessorCertificates().stream().filter(dto -> dto.getUuid().equals(sourceCertificate2.getUuid())).findFirst().isEmpty());
        relations = certificateService.getCertificateRelations(sourceCertificate2.getUuid());
        Assertions.assertTrue(relations.getSuccessorCertificates().isEmpty());
        Assertions.assertThrows(NotFoundException.class, () -> certificateService.removeCertificateAssociation(certificateUuid, sourceCertificate2.getUuid()));

        sourceCertificate2.setNotBefore(new Date());
        certificate.setNotBefore(Date.from(Instant.now().minus(1, ChronoUnit.DAYS)));
        certificateRepository.save(sourceCertificate2);
        certificateRepository.save(certificate);
        certificateService.associateCertificates(certificateUuid, sourceCertificate2.getUuid());
        relations = certificateService.getCertificateRelations(certificateUuid);
        Assertions.assertEquals(2, relations.getPredecessorCertificates().size());
        Assertions.assertEquals(1, relations.getSuccessorCertificates().size());
        Assertions.assertTrue(relations.getSuccessorCertificates().stream().anyMatch(dto -> dto.getUuid().equals(sourceCertificate2.getUuid())));

        certificate.setState(CertificateState.FAILED);
        certificateRepository.save(certificate);
        certificateService.removeCertificateAssociation(certificateUuid, sourceCertificate1.getUuid());
        Assertions.assertThrows(ValidationException.class, () -> certificateService.associateCertificates(certificateUuid, certificateUuid1));
        certificate.setState(CertificateState.PENDING_APPROVAL);
        certificateRepository.save(certificate);
        certificateService.associateCertificates(certificateUuid, certificateUuid1);
        relations = certificateService.getCertificateRelations(certificateUuid);
        certificateSimpleDto = relations.getPredecessorCertificates().stream().filter(dto -> dto.getUuid().equals(certificateUuid1)).findFirst().orElseThrow();
        Assertions.assertEquals(CertificateRelationType.PENDING, certificateSimpleDto.getRelationType());

    }

    @Test
    void testPrepareIssuedCertificate() throws CertificateException, NoSuchAlgorithmException, NotFoundException, AlreadyExistException, AttributeException {
        Certificate commonIssuer = new Certificate();
        CertificateUtil.prepareIssuedCertificate(commonIssuer, CertificateUtil.getX509Certificate(CA_BASE64_CONTENT));
        CertificateContent issuerContent = new CertificateContent();
        issuerContent.setContent(CA_BASE64_CONTENT);
        certificateContentRepository.save(issuerContent);
        commonIssuer.setCertificateContent(issuerContent);
        certificateRepository.save(commonIssuer);
        Certificate notIssued = new Certificate();
        notIssued.setRaProfile(raProfile);
        certificateRepository.save(notIssued);
        certificate.setIssuerSerialNumber(commonIssuer.getSerialNumber());
        certificate.setSubjectDnNormalized("2.5.4.3=hybrid-with-csr2");
        certificate.setIssuerDnNormalized(commonIssuer.getSubjectDnNormalized());
        certificate.setSubjectType(CertificateSubjectType.INTERMEDIATE_CA);
        CertificateRelation relation = new CertificateRelation();
        relation.setRelationType(CertificateRelationType.PENDING);
        relation.setSuccessorCertificate(notIssued);
        relation.setPredecessorCertificate(certificate);
        CertificateRelationId relationId = new CertificateRelationId(notIssued.getUuid(), certificate.getUuid());
        relation.setId(relationId);
        certificateRelationRepository.save(relation);
        certificateRepository.save(notIssued);
        certificateRepository.save(certificate);

        certificateService.issueRequestedCertificate(notIssued.getUuid(), EE_BASE64_CONTENT, null);

        CertificateRelationsDto relationsDto = certificateService.getCertificateRelations(notIssued.getUuid());
        Assertions.assertEquals(CertificateRelationType.REKEY, relationsDto.getPredecessorCertificates().getFirst().getRelationType());

        // Throw exception in update certificate chain
        notIssued.setCertificateContent(null);
        certificateRepository.save(notIssued);
        certificate.setIssuerSerialNumber(null);
        certificateRepository.save(certificate);
        relation.setRelationType(CertificateRelationType.PENDING);
        certificateRelationRepository.save(relation);
        certificateService.issueRequestedCertificate(notIssued.getUuid(), EE_BASE64_CONTENT, null);

        relationsDto = certificateService.getCertificateRelations(notIssued.getUuid());
        Assertions.assertEquals(CertificateRelationType.REPLACEMENT, relationsDto.getPredecessorCertificates().getFirst().getRelationType());
    }

    @NotNull
    private AcmeProfile getAcmeProfile() throws AlreadyExistException, AttributeException {
        AcmeProfile acmeProfile = new AcmeProfile();
        acmeProfile.setWebsite("sample website");
        acmeProfile.setTermsOfServiceUrl("sample terms");
        acmeProfile.setValidity(30);
        acmeProfile.setRetryInterval(30);
        acmeProfile.setDescription("sample description");
        acmeProfile.setName("sameName");
        acmeProfile.setDnsResolverPort("53");
        acmeProfile.setDnsResolverIp("localhost");
        acmeProfile.setTermsOfServiceChangeUrl("change url");
        acmeProfile.setEnabled(false);
        ProtocolCertificateAssociations protocolCertificateAssociations = getProtocolCertificateAssociation();
        acmeProfile.setCertificateAssociations(protocolCertificateAssociations);
        acmeProfile.setCertificateAssociationsUuid(protocolCertificateAssociations.getUuid());
        acmeProfileRepository.save(acmeProfile);
        protocolCertificateAssociationsRepository.save(protocolCertificateAssociations);
        return acmeProfile;
    }

    @NotNull
    private ProtocolCertificateAssociations getProtocolCertificateAssociation() throws AlreadyExistException, AttributeException {
        ProtocolCertificateAssociations protocolCertificateAssociations = new ProtocolCertificateAssociations();
        protocolCertificateAssociations.setOwnerUuid(UUID.randomUUID());
        protocolCertificateAssociations.setGroupUuids(List.of(group.getUuid()));
        CustomAttributeCreateRequestDto customAttributeRequest = new CustomAttributeCreateRequestDto();
        customAttributeRequest.setName("name");
        customAttributeRequest.setLabel("name");
        customAttributeRequest.setResources(List.of(Resource.CERTIFICATE));
        customAttributeRequest.setContentType(AttributeContentType.STRING);
        String attributeUuid = attributeService.createCustomAttribute(customAttributeRequest).getUuid();
        RequestAttributeDto requestAttributeDto = new RequestAttributeDto();
        requestAttributeDto.setUuid(attributeUuid);
        requestAttributeDto.setName(customAttributeRequest.getName());
        requestAttributeDto.setContentType(customAttributeRequest.getContentType());
        requestAttributeDto.setContent(List.of(new StringAttributeContent("ref", "data")));
        protocolCertificateAssociations.setCustomAttributes(List.of(requestAttributeDto));
        protocolCertificateAssociationsRepository.save(protocolCertificateAssociations);
        return protocolCertificateAssociations;
    }
}
